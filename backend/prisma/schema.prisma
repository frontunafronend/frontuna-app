datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique @db.Citext
  passwordHash    String
  role            String    @default("user")
  createdAt       DateTime  @default(now())
  
  // Enhanced auth fields
  emailVerifiedAt DateTime?
  isActive        Boolean   @default(true)
  firstName       String?
  lastName        String?
  lastLoginAt     DateTime?
  lastLoginIP     String?
  twoFASecret     String?
  
  // Relations
  components      Component[]
  usageLogs       UsageLog[]
  subscriptions   Subscription[]
  refreshTokens   RefreshToken[]
  passwordResetTokens PasswordResetToken[]
  emailVerifyTokens EmailVerifyToken[]
  auditLogs       AuditLog[]
  userSessions    UserSession[]
  
  @@index([createdAt(sort: Desc)])
  @@index([role])
  @@index([email])
  @@index([isActive])
}

model Component {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  style     String   // material | bootstrap | html
  framework String   // "angular"
  version   Int      @default(1)
  codeTs    String
  codeHtml  String
  codeScss  String
  meta      Json?
  createdAt DateTime @default(now())
  versions  ComponentVersion[]
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([framework])
  @@index([style])
  @@index([name])
  @@unique([userId, name])
}

model ComponentVersion {
  id          String   @id @default(uuid())
  componentId String
  component   Component @relation(fields: [componentId], references: [id], onDelete: Cascade)
  v           Int
  codeTs      String
  codeHtml    String
  codeScss    String
  notes       String?
  createdAt   DateTime  @default(now())

  @@unique([componentId, v])
}

model UsageLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokensIn  Int
  tokensOut Int
  route     String
  createdAt DateTime @default(now())
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([route])
}

model Subscription {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan        String   // free | pro
  status      String   // active | canceled
  startsAt    DateTime
  renewsAt    DateTime?
  stripeId    String?
  
  @@index([userId])
  @@index([plan, status])
  @@index([stripeId])
}

// üîê SECURE AUTH MODELS

model RefreshToken {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashedToken       String    @unique
  expiresAt         DateTime
  createdAt         DateTime  @default(now())
  revokedAt         DateTime?
  replacedByTokenId String?
  ip                String?
  userAgent         String?
  
  @@index([hashedToken])
  @@index([userId])
  @@index([expiresAt])
  @@index([revokedAt])
}

model PasswordResetToken {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashedToken String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  
  @@index([hashedToken])
  @@index([userId])
  @@index([expiresAt])
}

model EmailVerifyToken {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashedToken String    @unique
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime  @default(now())
  
  @@index([hashedToken])
  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  event     String   // SIGNUP, LOGIN_OK, LOGIN_FAIL, etc.
  meta      Json?    // Additional event data
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([event])
  @@index([createdAt(sort: Desc)])
  @@index([ip])
}

model UserSession {
  id        String    @id @default(uuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  ip        String?
  userAgent String?
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  
  @@index([userId])
  @@index([createdAt(sort: Desc)])
}
