name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Lint code
      run: |
        cd backend
        npm run lint
        
    - name: Run tests
      run: |
        cd backend
        npm test
        
  database-check:
    name: Database Migration Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Check Prisma schema
      run: |
        cd backend
        npx prisma validate
        npx prisma format --check
        
    - name: Generate Prisma client
      run: |
        cd backend
        npx prisma generate
        
    - name: Check for migration drift (Staging)
      if: github.event_name == 'pull_request'
      env:
        DATABASE_URL: ${{ secrets.NEON_STAGING_DATABASE_URL }}
      run: |
        cd backend
        npx prisma migrate diff --from-migrations ./prisma/migrations --to-schema-datamodel ./prisma/schema.prisma
        
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, database-check]
    if: github.event_name == 'pull_request'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run Prisma migrations (Staging)
      env:
        DATABASE_URL: ${{ secrets.NEON_STAGING_DATABASE_URL }}
      run: |
        cd backend
        npx prisma migrate deploy
        
    - name: Seed staging database
      env:
        DATABASE_URL: ${{ secrets.NEON_STAGING_DATABASE_URL }}
        ADMIN_EMAIL: ${{ secrets.STAGING_ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.STAGING_ADMIN_PASSWORD }}
      run: |
        cd backend
        npm run seed
        
    - name: Run database audit
      env:
        DATABASE_URL: ${{ secrets.NEON_STAGING_DATABASE_URL }}
      run: |
        cd backend
        npm run audit
        
    - name: Health check
      env:
        DATABASE_URL: ${{ secrets.NEON_STAGING_DATABASE_URL }}
      run: |
        cd backend
        node -e "
          const { PrismaClient } = require('@prisma/client');
          const prisma = new PrismaClient();
          prisma.\$queryRaw\`SELECT 1 as test\`.then(result => {
            console.log('✅ Staging database health check passed');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Staging database health check failed:', err);
            process.exit(1);
          }).finally(() => prisma.\$disconnect());
        "
        
    # Add your deployment steps here (e.g., deploy to Vercel, Railway, etc.)
    - name: Deploy to staging environment
      run: |
        echo "🚀 Deploying to staging environment..."
        # Add your staging deployment commands here
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, database-check]
    if: github.ref == 'refs/heads/main'
    
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci --only=production
        
    - name: Run Prisma migrations (Production)
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        npx prisma migrate deploy
        
    - name: Generate Prisma client
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        npx prisma generate
        
    - name: Run database audit
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        npm run audit
        
    - name: Health check
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        node -e "
          const { PrismaClient } = require('@prisma/client');
          const prisma = new PrismaClient();
          prisma.\$queryRaw\`SELECT 1 as test\`.then(result => {
            console.log('✅ Production database health check passed');
            process.exit(0);
          }).catch(err => {
            console.error('❌ Production database health check failed:', err);
            process.exit(1);
          }).finally(() => prisma.\$disconnect());
        "
        
    - name: Create database backup
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        npm run backup
        
    # Add your production deployment steps here
    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        # Add your production deployment commands here
        
  backup:
    name: Scheduled Database Backup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install pg_dump
      run: |
        sudo apt-get update
        sudo apt-get install postgresql-client
        
    - name: Create backup
      env:
        DATABASE_URL: ${{ secrets.NEON_PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        npm run backup
        
    - name: Upload backup to storage
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      run: |
        # Install AWS CLI
        pip install awscli
        
        # Upload backup
        cd backend/backups
        aws s3 cp . s3://${{ secrets.BACKUP_S3_BUCKET }}/database-backups/ --recursive --exclude "*" --include "*.gz"
