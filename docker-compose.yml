version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: frontuna-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: frontuna
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./backend/src/mock-data:/docker-entrypoint-initdb.d
    networks:
      - frontuna-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: frontuna-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - frontuna-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: frontuna-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/frontuna?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your_jwt_secret_here_change_in_production
      JWT_REFRESH_SECRET: your_refresh_secret_here_change_in_production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      FRONTEND_URL: http://localhost:4200
      # Email Configuration
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@frontuna.ai}
      # File Upload
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Analytics
      GA_TRACKING_ID: ${GA_TRACKING_ID}
      # External APIs
      COMPETITOR_API_KEY: ${COMPETITOR_API_KEY}
      # Security
      BCRYPT_ROUNDS: 12
      TOKEN_EXPIRATION_BUFFER: 300000
    ports:
      - "3000:3000"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - frontuna-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: frontuna-frontend
    restart: unless-stopped
    ports:
      - "4200:80"
    depends_on:
      - backend
    networks:
      - frontuna-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: frontuna-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - frontuna-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  frontuna-network:
    driver: bridge

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  backend:
    environment:
      NODE_ENV: development
      FRONTEND_URL: http://localhost:4200
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  frontend:
    build:
      target: development
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start
    ports:
      - "4200:4200"