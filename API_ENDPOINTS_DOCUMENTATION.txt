================================================================================
📚 FRONTUNA API ENDPOINTS - COMPLETE DOCUMENTATION
================================================================================
📅 Last Updated: September 6, 2025
🔗 Base URL: http://localhost:3000 (local) | https://frontuna-api.vercel.app (production)
🔐 Authentication: JWT Bearer tokens required for protected endpoints

================================================================================
🔐 AUTHENTICATION ENDPOINTS
================================================================================

1. POST /api/auth/login
   📋 Description: Authenticate user with email and password
   🔒 Authentication: None required
   📥 Request Body:
   {
     "email": "admin@frontuna.com",
     "password": "admin123"
   }
   📤 Response (200):
   {
     "success": true,
     "message": "Login successful",
     "data": {
       "user": {
         "id": "uuid",
         "email": "admin@frontuna.com",
         "role": "admin",
         "createdAt": "2025-09-06T..."
       },
       "accessToken": "jwt-token-here"
     }
   }

2. POST /api/auth/signup
   📋 Description: Register new user account
   🔒 Authentication: None required
   📥 Request Body:
   {
     "email": "newuser@example.com",
     "password": "securepassword",
     "firstName": "John",
     "lastName": "Doe"
   }
   📤 Response (201):
   {
     "success": true,
     "message": "User created successfully",
     "data": {
       "user": { ... },
       "accessToken": "jwt-token-here"
     }
   }

3. GET /api/auth/profile
   📋 Description: Get authenticated user's profile
   🔒 Authentication: Bearer token required
   📤 Response (200):
   {
     "success": true,
     "data": {
       "user": {
         "id": "uuid",
         "email": "user@example.com",
         "role": "user",
         "createdAt": "2025-09-06T..."
       }
     }
   }

4. POST /api/auth/logout
   📋 Description: Logout user and clear cookies
   🔒 Authentication: None required
   📤 Response (200):
   {
     "success": true,
     "message": "Logged out successfully"
   }

================================================================================
👤 USER ENDPOINTS
================================================================================

5. GET /api/users/profile
   📋 Description: Extended user profile with statistics
   🔒 Authentication: Bearer token required
   📤 Response (200):
   {
     "success": true,
     "data": {
       "user": {
         "id": "uuid",
         "email": "user@example.com",
         "role": "user",
         "createdAt": "2025-09-06T...",
         "stats": {
           "totalComponents": 5,
           "totalTokensUsed": 1250,
           "recentComponents": [...]
         }
       }
     }
   }

6. GET /api/users/analytics
   📋 Description: User analytics and usage statistics
   🔒 Authentication: Bearer token required
   📤 Response (200):
   {
     "success": true,
     "data": {
       "analytics": {
         "totalComponents": 8,
         "totalTokensUsed": 2500,
         "avgTokensPerRequest": 125,
         "requestsLast30Days": 20,
         "frameworkBreakdown": {
           "Angular": 5,
           "React": 3
         },
         "styleBreakdown": {
           "Material": 4,
           "Bootstrap": 4
         },
         "recentActivity": [...]
       }
     }
   }

7. GET /api/api/components
   📋 Description: User's component library
   🔒 Authentication: Bearer token required
   📤 Response (200):
   {
     "success": true,
     "data": {
       "components": [
         {
           "id": "uuid",
           "name": "LoginForm",
           "style": "Material",
           "framework": "Angular",
           "version": 1,
           "createdAt": "2025-09-06T...",
           "meta": { "description": "..." }
         }
       ],
       "total": 5
     }
   }

================================================================================
👑 ADMIN ENDPOINTS
================================================================================

8. GET /api/admin/users
   📋 Description: Get all users (admin only)
   🔒 Authentication: Bearer token required (admin role)
   📤 Response (200):
   {
     "success": true,
     "data": {
       "users": [
         {
           "id": "uuid",
           "email": "user@example.com",
           "role": "user",
           "createdAt": "2025-09-06T..."
         }
       ],
       "total": 10
     }
   }

9. GET /api/admin/stats
   📋 Description: Comprehensive admin statistics
   🔒 Authentication: Bearer token required (admin role)
   📤 Response (200):
   {
     "success": true,
     "data": {
       "stats": {
         "overview": {
           "totalUsers": 25,
           "totalComponents": 150,
           "totalTokensUsed": 50000
         },
         "recent": {
           "newUsers": 5,
           "newComponents": 20,
           "apiRequests": 500
         },
         "trends": {
           "topFrameworks": [
             { "name": "Angular", "count": 80 },
             { "name": "React", "count": 70 }
           ],
           "topStyles": [
             { "name": "Material", "count": 90 },
             { "name": "Bootstrap", "count": 60 }
           ]
         }
       }
     }
   }

================================================================================
🤖 AI & COPILOT ENDPOINTS
================================================================================

10. GET /api/suggestions
    📋 Description: AI component suggestions
    🔒 Authentication: Bearer token required
    📤 Response (200):
    {
      "success": true,
      "data": {
        "suggestions": [
          {
            "id": "suggestion-1",
            "title": "Material Design Button",
            "description": "Create a modern Material Design button component",
            "framework": "Angular",
            "style": "Material",
            "difficulty": "Easy",
            "estimatedTime": "5 minutes"
          }
        ],
        "total": 3
      }
    }

11. GET /api/ai/copilot/suggestions
    📋 Description: AI-powered component recommendations
    🔒 Authentication: Bearer token required
    📤 Response (200):
    {
      "success": true,
      "data": {
        "suggestions": [
          {
            "id": "ai-suggestion-1",
            "type": "component",
            "title": "Smart Login Form",
            "description": "AI-generated login form with validation",
            "confidence": 0.95,
            "framework": "Angular",
            "style": "Material"
          }
        ]
      }
    }

12. GET /api/ai/prompt/health
    📋 Description: AI service health check
    🔒 Authentication: Bearer token required
    📤 Response (200):
    {
      "success": true,
      "data": {
        "status": "healthy",
        "aiService": "online",
        "promptEngine": "ready",
        "responseTime": "45ms"
      }
    }

13. POST /api/ai/copilot/session/start
    📋 Description: Start AI copilot session
    🔒 Authentication: Bearer token required
    📥 Request Body:
    {
      "context": "component-generation"
    }
    📤 Response (200):
    {
      "success": true,
      "data": {
        "sessionId": "session-1725634567890",
        "status": "started",
        "context": "component-generation",
        "aiModel": "gpt-4",
        "maxTokens": 4000
      }
    }

================================================================================
🚀 SYSTEM & UTILITY ENDPOINTS
================================================================================

14. GET /health
    📋 Description: Main system health check
    🔒 Authentication: None required
    📤 Response (200):
    {
      "status": "ok",
      "timestamp": "2025-09-06T...",
      "message": "✅ Production API with Live Neon Database is healthy!",
      "environment": "production",
      "database": "connected",
      "version": "3.0.0-production",
      "platform": "vercel"
    }

15. GET /api/health
    📋 Description: Alternative API health endpoint
    🔒 Authentication: None required
    📤 Response (200):
    {
      "status": "ok",
      "timestamp": "2025-09-06T...",
      "message": "✅ API and Database are healthy!",
      "environment": "development",
      "database": "connected",
      "version": "3.0.0-local",
      "api": "ready"
    }

16. POST /api/start
    📋 Description: Start component generation process
    🔒 Authentication: Bearer token required
    📥 Request Body:
    {
      "name": "MyComponent",
      "framework": "Angular",
      "style": "Material"
    }
    📤 Response (200):
    {
      "success": true,
      "data": {
        "component": {
          "id": "comp-1725634567890",
          "name": "MyComponent",
          "framework": "Angular",
          "style": "Material",
          "status": "generating",
          "progress": 0,
          "estimatedTime": "2-3 minutes"
        },
        "message": "Component generation started"
      }
    }

17. POST /api/analytics/batch
    📋 Description: Process analytics events in batch
    🔒 Authentication: Bearer token required
    📥 Request Body:
    {
      "events": [
        {
          "route": "/api/generate",
          "tokensIn": 100,
          "tokensOut": 200
        }
      ]
    }
    📤 Response (200):
    {
      "success": true,
      "data": {
        "processed": 1,
        "status": "recorded"
      }
    }

================================================================================
❌ ERROR RESPONSES
================================================================================

400 Bad Request:
{
  "success": false,
  "error": "Email and password are required"
}

401 Unauthorized:
{
  "success": false,
  "error": "Authentication required"
}

403 Forbidden:
{
  "success": false,
  "error": "Admin access required"
}

404 Not Found:
{
  "success": false,
  "error": "Endpoint not found",
  "path": "/api/unknown",
  "availableEndpoints": [...]
}

500 Internal Server Error:
{
  "success": false,
  "error": "Internal server error",
  "message": "Database connection failed"
}

503 Service Unavailable:
{
  "success": false,
  "error": "Database not ready"
}

================================================================================
🔐 AUTHENTICATION FLOW
================================================================================

1. Login with POST /api/auth/login
2. Receive accessToken in response
3. Include token in subsequent requests:
   Headers: { "Authorization": "Bearer your-jwt-token-here" }
4. Token expires in 15 minutes
5. Use refresh token or re-login for new session

================================================================================
🧪 TESTING CREDENTIALS
================================================================================

Admin Account:
- Email: admin@frontuna.com
- Password: admin123
- Role: admin (access to all endpoints)

Test User Accounts:
- Email: john@example.com
- Password: password123
- Role: user

- Email: jane@example.com  
- Password: password123
- Role: user

- Email: bob@example.com
- Password: password123
- Role: user

================================================================================
📊 RATE LIMITING & PERFORMANCE
================================================================================

Rate Limits:
- 100 requests per 15-minute window per IP
- No rate limiting on health endpoints
- Admin endpoints have higher limits

Performance Targets:
- Health checks: <50ms
- Authentication: <200ms
- Data queries: <100ms
- Complex analytics: <300ms

================================================================================
🔧 DEVELOPMENT & TESTING
================================================================================

Local Development:
1. Start server: node backend/local-server.js
2. API available at: http://localhost:3000
3. Test with: test-all-endpoints.js

Production Testing:
1. Deploy to Vercel: vercel --prod
2. Test with live database
3. Monitor with admin dashboard

================================================================================
